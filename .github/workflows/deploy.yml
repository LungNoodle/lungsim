name: Build Test and Deploy Matrix
permissions:
  contents: write
on:
  push:
    branches:
      -main
  workflow_dispatch:

env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18497/w_BaseKit_p_2022.1.2.154_offline.exe
  WINDOWS_HPCKIT_LATEST_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18529/w_HPCKit_p_2022.1.2.116_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/2a13d966-fcc5-4a66-9fcc-50603820e0c9/w_HPCKit_p_2023.1.0.46357_offline.exe
  WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.dpcpp-compiler
  WINDOWS_FORTRAN_COMPONENTS: intel.oneapi.win.ifort-compiler
  SAMPLES_TAG: 2022.1.0

jobs:
  build-test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
#        - {
#            name: "Windows 2019 MSVC",
#            build_type: "Release",
#            os: windows-2019,
#          }
        - {
            name: "Ubuntu 20.04",
            build_type: "Release",
            os: ubuntu-20.04,
          }
        - {
            name: "Ubuntu 20.04 with SuperLU",
            build_type: "Release",
            super_lu: true,
            os: ubuntu-20.04,
          }
        - {
            name: "macOS Big Sur 11",
            build_type: "Release",
            os: macos-11,
          }
    steps:
    - name: Checkout oneAPI scripts
      if: runner.os == 'Windows'
      uses: actions/checkout@v3
      with:
        repository: 'hsorby/oneapi-ci'
        path: 'oneapi'

    - name: Install oneAPI HPC kit
      if: runner.os == 'Windows' && steps.cache-install.outputs.cache-hit != 'true'
      working-directory: oneapi
      shell: bash
      run: |
        scripts/install_windows.bat $WINDOWS_HPCKIT_URL $WINDOWS_FORTRAN_COMPONENTS

    - name: Exclude unused files from cache
      if: runner.os == 'Windows' && steps.cache-install.outputs.cache-hit != 'true'
      working-directory: oneapi
      run: scripts/cache_exclude_windows.ps1

    - name: Checkout lungsim
      uses: actions/checkout@v2
      with:
        path: lungsim

    - name: Run get Fortran environment script
      id: setup-fortran-win
      if: runner.os == 'Windows'
      shell: bash
      working-directory: lungsim
      run: |
        latest_version=`.github/scripts/oneapi-env-vars-location.bat`
        echo "ifort compiler: $latest_version"
        # latest_version=`echo $latest_version | tr '\' '/'`
        # echo $latest_version
        # echo "::set-output name=env_bat::${latest_version}"
        echo "::set-output name=fc::${latest_version}"
        redist_location=`.github/scripts/oneapi-redist-location.bat`
        echo "redist location: ${redist_location}"
        echo "::set-output name=redist_loc::${redist_location}"

    - name: Report CMake version
      run: cmake --version

    - name: Install SuperLU
      if: matrix.config.super_lu
      shell: bash
      run: sudo apt-get install libsuperlu-dev

    - name: Create virtual environment
      shell: cmake -P {0}
      id: create-venv
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(SYS_PYTHON_EXE python)
        else()
          set(SYS_PYTHON_EXE python3)
        endif()

        execute_process(
          COMMAND ${SYS_PYTHON_EXE} -m venv venv
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Failed to create virtual environment.")
        endif()

        if ("${{ runner.os }}" STREQUAL "Windows")
          file(GLOB PYTHON_EXE venv/Scripts/python.exe)
          file(GLOB PIP_EXE venv/Scripts/pip.exe)
        else()
          file(GLOB PYTHON_EXE venv/bin/python)
          file(GLOB PIP_EXE venv/bin/pip)
        endif()

        execute_process(
          COMMAND ${PYTHON_EXE} -m pip install numpy
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Failed to install numpy to virtual environment.")
        endif()

        execute_process(
          COMMAND echo "::set-output name=python_exe::${PYTHON_EXE}"
        )
        execute_process(
          COMMAND echo "::set-output name=pip_exe::${PIP_EXE}"
        )

    - name: Generate build instructions - Windows
      if: runner.os == 'Windows'
      run: |
        cmake -S lungsim -B build-lungsim -D CMAKE_Fortran_COMPILER=ifort -D AETHER_ENABLE_TESTS=FALSE -D Python_EXECUTABLE=${{ steps.create-venv.outputs.python_exe }}
    
    - name: Generate build instructions - Linux
      shell: bash
      if: runner.os == 'Linux'
      run: |
        cmake \
          -S lungsim \
          -B build-lungsim \
          -D CMAKE_Fortran_COMPILER=gfortran \
          -D AETHER_ENABLE_TESTS=FALSE \
          -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
          -D Python_EXECUTABLE=${{ steps.create-venv.outputs.python_exe }}
          
    - name: Generate build instructions - macOS
      shell: bash
      if: runner.os == 'macOS'
      run: |
        cmake \
          -S lungsim \
          -B build-lungsim \
          -D CMAKE_Fortran_COMPILER=gfortran-9 \
          -D AETHER_ENABLE_TESTS=FALSE \
          -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
          -D Python_EXECUTABLE=${{ steps.create-venv.outputs.python_exe }}
          
    - name: Build lungsim
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(WINDOWS_BUILD_CONFIG --config ${{ matrix.config.build_type }})
        endif()

        execute_process(
          COMMAND cmake --build build-lungsim ${WINDOWS_BUILD_CONFIG}
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )
        if (NOT result EQUAL 0)
          string(REGEX MATCH "FAILED:.*$" error_message "${output}")
          string(REPLACE "\n" "%0A" error_message "${error_message}")
          message("::error::${error_message}")
          message(FATAL_ERROR "Build failed.")
        endif()

    - name: Test lungsim
      id: test-lungsim
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          multi_config_dir=/${{ matrix.config.build_type }}
        else
          multi_config_dir=/
        fi

        echo "::set-output name=multi_config_dir::$multi_config_dir"
        
        ${{ steps.create-venv.outputs.pip_exe }} install wheel
        ${{ steps.create-venv.outputs.pip_exe }} install $GITHUB_WORKSPACE/build-lungsim/src/bindings/python$multi_config_dir
        
        if [ "${{ runner.os }}" == "Windows" ]; then
          # Horrible hack for GitHub actions Windows virtual machine.
          prefix_path=$(dirname $(dirname ${{ steps.create-venv.outputs.python_exe }}))
          
          cp $prefix_path/Library/bin/libifcoremd.dll $GITHUB_WORKSPACE/venv/Lib/site-packages/aether
          cp $prefix_path/Library/bin/libmmd.dll $GITHUB_WORKSPACE/venv/Lib/site-packages/aether
          cp $prefix_path/Library/bin/svml_dispmd.dll $GITHUB_WORKSPACE/venv/Lib/site-packages/aether
        fi

        ${{ steps.create-venv.outputs.python_exe }} $GITHUB_WORKSPACE/lungsim/.github/scripts/diagnostics_test.py
        
        exit $?
        
    - name: Upload Result
      uses: actions/upload-artifact@v3
      with: 
        name: ${{ matrix.config.name }}
        path:
          build-lungsim/src/bindings/python/${{ steps.test-lungsim.outputs.multi_config_dir }}
          venv/Lib/site-packages/aether/libifcoremd.dll
          venv/Lib/site-packages/aether/libmmd.dll
          venv/Lib/site-packages/aether/svml_dispmd.dll
    

        
        
  deploy:
    if: ${{ always() }}
    needs: build-test
    runs-on:
      ubuntu-latest
    steps:      
    - name: Checkout Repository # Checkout build branch (must exist already)
      uses: actions/checkout@v3
      with: 
        ref: build 

      
    - name: Download Build
      uses: actions/download-artifact@v3

    - name: Push to Repository
      shell: bash
      run: |
          git add --all
          mkdir -p build/
          rm -rf ./build/*
          git diff --cached --name-only | xargs -I% mv "%" build/  # Move all new files to build directory
          shopt -s extglob
          rm -rf !(build)  # Remove everything else to keep the branch tidy
          git add --all # Re-add beacuse we moved the files
          git config --global user.email "${{github.actor}}@users.noreply.github.com"
          git config --global user.name "${{github.actor}}"
          git commit -am "Build result"
          git push  
      
