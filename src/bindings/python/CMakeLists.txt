
project(AetherPythonBindings LANGUAGES C)

set(ADDITIONAL_GENERATED_FILES)
# SWIG has already been found at this point.
include(${SWIG_USE_FILE})

if(${Python_VERSION_MAJOR} STREQUAL "3")
  set(PYTHONLIBS_SWIG_FLAGS -py3 -relativeimport)
endif()

if(WIN32)
  set(SETUP_PY_OPERATING_SYSTEM_CLASSIFIER "Operating System :: Microsoft :: Windows")
elseif(DARWIN)
  set(SETUP_PY_OPERATING_SYSTEM_CLASSIFIER "Operating System :: MacOS :: MacOS X")
else()
  set(SETUP_PY_OPERATING_SYSTEM_CLASSIFIER "Operating System :: Unix")
endif()

set(INTERFACE_SRCS
  ../interface/arrays.i
  ../interface/diagnostics.i
  ../interface/exports.i
  ../interface/filenames.i
  ../interface/field_utilities.i
  ../interface/gas_exchange.i
  ../interface/gasmix.i
  ../interface/geometry.i
  ../interface/growtree.i
  ../interface/indices.i
  ../interface/imports.i
  ../interface/pressure_resistance_flow.i
  ../interface/species_transport.i
  ../interface/surface_fitting.i
  ../interface/ventilation.i
  ../interface/wave_transmission.i
)

set_source_files_properties(${INTERFACE_SRCS} PROPERTIES INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/../c)
# For very old CMake must check to see if required on CMake 3.10.2
#include_directories(${PYTHON_INCLUDE_DIRS} ${NUMPY_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}/../c)

# Put the Intermediary files generated by SWIG into their own directory.
set(SWIG_GENERATED_INTERMEDIARIES_FILES_DIR ${CMAKE_CURRENT_BINARY_DIR}/swig_intermediaries)
set(_SWIG_GENERATED_PYTHON_FILES_DIR ${CMAKE_CURRENT_BINARY_DIR}/swig_generated_python_files)

if(IS_MULTI_CONFIG)
  set(_CFG_DIR "/$<CONFIG>")
endif()

set(PYTHON_PACKAGE_DIR ${CMAKE_CURRENT_BINARY_DIR}${_CFG_DIR}/aether)
set(PYTHON_PACKAGE_INIT_FILE ${CMAKE_CURRENT_BINARY_DIR}${_CFG_DIR}/aether/__init__.py)
set(PYTHON_SETUP_PY_FILE_CONFIGURATION_DIR ${CMAKE_CURRENT_BINARY_DIR}${_CFG_DIR})
if(IS_MULTI_CONFIG)
  set(CMAKE_SWIG_OUTDIR ${CMAKE_CURRENT_BINARY_DIR}${_CFG_DIR}/aether)
  set(PYTHON_SETUP_PY_FILE_DIR ${CMAKE_CURRENT_BINARY_DIR}${_CFG_DIR})
else()
  set(CMAKE_SWIG_OUTDIR "${PYTHON_PACKAGE_DIR}")
  set(PYTHON_SETUP_PY_FILE_DIR ${CMAKE_CURRENT_BINARY_DIR})
endif()
set(PYTHON_MODULE_INSTALL_PREFIX lib/python${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}${_CFG_DIR}/aether)

set(SETUP_PY_PACKAGE_FILES "'\${TARGET_FILE_NAME_aether_c}'")
set(FINALISE_PYTHON_BINDINGS_ARGUMENTS -DPYTHON_PACKAGE_DIR=${PYTHON_PACKAGE_DIR})
list(APPEND FINALISE_PYTHON_BINDINGS_ARGUMENTS -DTARGET_FILE_NAME_aether=$<TARGET_FILE_NAME:aether_c>)
if (UNIX AND NOT APPLE)
  list(APPEND SETUP_PY_PACKAGE_FILES "'\${TARGET_SONAME_FILE_NAME_aether_c}'")
  list(APPEND FINALISE_PYTHON_BINDINGS_ARGUMENTS -DTARGET_SONAME_FILE_NAME_aether=$<TARGET_SONAME_FILE_NAME:aether_c>)
endif ()

list(APPEND ADDITIONAL_GENERATED_FILES ${PYTHON_PACKAGE_INIT_FILE})

set(CMAKE_SWIG_FLAGS ${PYTHONLIBS_SWIG_FLAGS})

set(SWIG_PYTHON_BINDINGS_TARGETS)
set(PYTHON_MODULE_FILES)
foreach(SWIG_INTERFACE ${INTERFACE_SRCS})
  get_filename_component(MODULE_TARGET ${SWIG_INTERFACE} NAME_WE)
  swig_add_library(${MODULE_TARGET}
    LANGUAGE python
    OUTPUT_DIR ${_SWIG_GENERATED_PYTHON_FILES_DIR}
    OUTFILE_DIR ${SWIG_GENERATED_INTERMEDIARIES_FILES_DIR}
    SOURCES ${SWIG_INTERFACE})
  # The Python debug libraries on windows also require the Python release libraries
  # (this appears to be the case for the libraries built with Visual Studio 14 2015),
  # so we add the release libraries here for all platforms.  This probably means that
  # when we try and link to the debug version of the Python libraires on OSX and GNU/Linux 
  # we will not succeed.  But as this is rarely done it hopefully won't become an issue.
  target_link_libraries(${MODULE_TARGET} Python::Python Python::NumPy aether_c)
  set_target_properties(${MODULE_TARGET} PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY ${PYTHON_PACKAGE_DIR}
    RUNTIME_OUTPUT_DIRECTORY ${PYTHON_PACKAGE_DIR}
    INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/../c
    FOLDER bindings/python
    C_VISIBILITY_PRESET hidden
    VISIBILITY_INLINES_HIDDEN 1)

  list(APPEND SWIG_PYTHON_BINDINGS_TARGETS ${MODULE_TARGET})
  list(APPEND FINALISE_PYTHON_BINDINGS_ARGUMENTS -DTARGET_FILE_NAME_${MODULE_TARGET}=$<TARGET_FILE_NAME:${MODULE_TARGET}>)

  if (MSVC)
    if (${PYTHON_LIBRARY_DEBUG})
      # Again from the above comment we need the debug Python library and release Python library when
      # linking with link.exe on Windows.
      target_link_libraries(${MODULE_TARGET} $<$<CONFIG:Debug>:PYTHON_LIBRARY_DEBUG>)
    else()
      # Disable use of Debug Python libraries when not available and using MSVC.
      # See http://stackoverflow.com/questions/11311877/creating-a-dll-from-a-wrapped-cpp-file-with-swig
      target_compile_definitions(${MODULE_TARGET} PRIVATE $<$<CONFIG:Debug>:SWIG_PYTHON_INTERPRETER_NO_DEBUG>)
    endif()
    set_target_properties(${MODULE_TARGET} PROPERTIES
      LIBRARY_OUTPUT_DIRECTORY_DEBUG ${PYTHON_PACKAGE_DIR}
      LIBRARY_OUTPUT_DIRECTORY_RELEASE ${PYTHON_PACKAGE_DIR})
  endif()
  get_target_property(_SOURCES_LIST ${MODULE_TARGET} SOURCES)
  foreach(_SOURCE in ${_SOURCES_LIST})
    string(REGEX MATCH "^.+\.py$" _MATCH ${_SOURCE})
    if(_MATCH)
      string(REPLACE "$(Configuration)" "$<CONFIG>" _MATCH ${_MATCH})
      list(APPEND PYTHON_MODULE_FILES ${_MATCH})
    endif()
  endforeach()
endforeach()

add_custom_target(pybindings ALL)
add_dependencies(pybindings ${SWIG_PYTHON_BINDINGS_TARGETS})
if (MSVC)
  add_custom_command(TARGET ${SWIG_PYTHON_BINDINGS_TARGETS} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:aether_c> $<$<CONFIG:Debug>:$<TARGET_PDB_FILE:aether_c>> ${PYTHON_PACKAGE_DIR})
endif ()

set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES "${ADDITIONAL_GENERATED_FILES}")

set(AETHER_README_FILE ${Aether_SOURCE_DIR}/README.rst)
install(TARGETS ${SWIG_PYTHON_BINDINGS_TARGETS}
  RUNTIME DESTINATION ${PYTHON_MODULE_INSTALL_PREFIX}
  LIBRARY DESTINATION ${PYTHON_MODULE_INSTALL_PREFIX})

install(FILES ${PYTHON_PACKAGE_INIT_FILE} ${PYTHON_MODULE_FILES} $<TARGET_FILE:aether_c> 
  DESTINATION ${PYTHON_MODULE_INSTALL_PREFIX})
if (MSVC)
  install(FILES $<$<CONFIG:Debug>:$<TARGET_PDB_FILE:aether_c>> DESTINATION ${PYTHON_MODULE_INSTALL_PREFIX})
endif ()

install(FILES ${PYTHON_SETUP_PY_FILE_CONFIGURATION_DIR}/setup.py ${Aether_SOURCE_DIR}/LICENCE.txt
  ${AETHER_README_FILE}
  DESTINATION ${PYTHON_MODULE_INSTALL_PREFIX}/..)

set(PYPI_PACKAGE_NAME aether)
set(SETUP_PY_PACKAGE_FILES_STR "${SETUP_PY_PACKAGE_FILES}")
string(REPLACE ";" ", " SETUP_PY_PACKAGE_FILES_STR "${SETUP_PY_PACKAGE_FILES_STR}")
set(SETUP_PRE_GEN_PY_FILE "${CMAKE_CURRENT_BINARY_DIR}/setup.pre_gen.py")
configure_file(setup.in.py ${SETUP_PRE_GEN_PY_FILE} @ONLY)

set(FINALISE_PYTHON_BINDINGS_SCRIPT ${CMAKE_CURRENT_BINARY_DIR}/finalise_python_package.cmake)
configure_file(${Aether_SOURCE_DIR}/cmake/finalise_python_package.in.cmake ${FINALISE_PYTHON_BINDINGS_SCRIPT} @ONLY)
add_custom_command(TARGET ${SWIG_PYTHON_BINDINGS_TARGETS} POST_BUILD
  COMMAND ${CMAKE_COMMAND} ${FINALISE_PYTHON_BINDINGS_ARGUMENTS} -P ${FINALISE_PYTHON_BINDINGS_SCRIPT}
  COMMAND ${CMAKE_COMMAND} -E copy_directory ${_SWIG_GENERATED_PYTHON_FILES_DIR} ${PYTHON_PACKAGE_DIR}
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/__init__.py ${AETHER_README_FILE} ${SETUP_PRE_GEN_PY_FILE}
  COMMENT "Finalise preparation of Aether Python bindings."
)

if (NOT IS_MULTI_CONFIG AND AETHER_BUILD_TYPE)
  string(TOLOWER ${AETHER_BUILD_TYPE} LOWER_AETHER_BUILD_TYPE)
  set(_BUILD_TYPE_PART ${LOWER_AETHER_BUILD_TYPE}_)
endif()

find_program(VIRTUALENV_EXECUTABLE NAMES ${VIRTUALENV_PREFERRED_NAMES} virtualenv)
message(STATUS "${VIRTUALENV_EXECUTABLE} -p ${Python_EXECUTABLE} venv_${_BUILD_TYPE_PART}py${Python_VERSION_MAJOR}${Python_VERSION_MINOR}")
